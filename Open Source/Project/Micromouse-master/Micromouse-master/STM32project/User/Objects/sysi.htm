<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\sysi.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\sysi.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Nov 30 18:55:23 2019
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MainLoop &rArr; mouseApp_Loop &rArr; MapCreatLoop &rArr; MapCreator &rArr; backToLastAct &rArr; getDirFirst &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from time.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">USART_RxToBuf</a> from comhandle.o(i.USART_RxToBuf) referenced from comhandle.o(i.comHandleInit)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4b]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[4d]">mouseMoveFastI</a> from movectrl.o(i.mouseMoveFastI) referenced from navigator.o(i.NavigatorFastII)
 <LI><a href="#[4d]">mouseMoveFastI</a> from movectrl.o(i.mouseMoveFastI) referenced from navigator.o(i.NavigatorStaticPath)
 <LI><a href="#[4e]">mouseMoveSP</a> from movectrl.o(i.mouseMoveSP) referenced from navigator.o(i.NavigatorFastII)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[53]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[146]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[147]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[54]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[148]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[67]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[149]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[5a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[14a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[150]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[151]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[152]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[153]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[154]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[155]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[156]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[157]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[158]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[159]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[15f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[160]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[161]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[162]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[163]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[164]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[52]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[166]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[57]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[59]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[167]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MainLoop &rArr; mouseApp_Loop &rArr; MapCreatLoop &rArr; MapCreator &rArr; backToLastAct &rArr; getDirFirst &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[168]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[169]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[60]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[62]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathWrite
</UL>

<P><STRONG><a name="[6b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[6c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[56]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[65]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOver
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[6a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[64]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[63]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[4b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[170]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[173]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[61]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[174]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>Adc_Init</STRONG> (Thumb, 400 bytes, Stack size 0 bytes, infrared_1.o(i.Adc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[70]"></a>Adc_Transition</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, infrared_1.o(i.Adc_Transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adc_Transition
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_Start
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRedVal
</UL>

<P><STRONG><a name="[73]"></a>AttitudeStateMachine</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, attitude.o(i.AttitudeStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AttitudeStateMachine &rArr; FSL_DividerFast &rArr; FSL_moveController &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_Divider
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDD_DividerFast
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDD_Divider
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTR_DividerFast
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_OverDataDel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_DividerFast
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveInterrupt
</UL>

<P><STRONG><a name="[e3]"></a>AttitudeStateSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, attitude.o(i.AttitudeStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrller
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLineFastI
</UL>

<P><STRONG><a name="[7b]"></a>BackActCheck</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ergodicmap.o(i.BackActCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BackActCheck &rArr; visitedCheck &rArr; visitedState
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visitedCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backToLastAct
</UL>

<P><STRONG><a name="[122]"></a>DianJi_TiaoSu</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, dain_ji.o(i.DianJi_TiaoSu))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMotorPWM
</UL>

<P><STRONG><a name="[7d]"></a>Dian_Ji_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dain_ji.o(i.Dian_Ji_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dian_Ji_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[80]"></a>Dian_Ji_Read</STRONG> (Thumb, 380 bytes, Stack size 0 bytes, dain_ji.o(i.Dian_Ji_Read))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[84]"></a>Dma_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, infrared_1.o(i.Dma_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[72]"></a>Dma_Start</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, infrared_1.o(i.Dma_Start))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Transition
</UL>

<P><STRONG><a name="[7f]"></a>DriveInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drive.o(i.DriveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DriveInit &rArr; UsartInit &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedAnKey_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Send_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dian_Ji_Read
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dian_Ji_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>ETR_Divider</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, odometer.o(i.ETR_Divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ETR_Divider &rArr; StandardGridCumulative &rArr; MapActivityRecord &rArr; sendMes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odometerLoop
</UL>

<P><STRONG><a name="[8a]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stmflash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[8d]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stmflash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[ee]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stmflash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[8c]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stmflash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[ec]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stmflash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[8b]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stmflash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[76]"></a>FSL_DividerFast</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, attitude.o(i.FSL_DividerFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FSL_DividerFast &rArr; FSL_moveController &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateMachine
</UL>

<P><STRONG><a name="[7a]"></a>FSL_OverDataDel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, attitude.o(i.FSL_OverDataDel))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateMachine
</UL>

<P><STRONG><a name="[8e]"></a>FSL_moveController</STRONG> (Thumb, 952 bytes, Stack size 104 bytes, attitude.o(i.FSL_moveController))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FSL_moveController &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEncoderVal
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRedOffset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetSpeed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_DividerFast
</UL>

<P><STRONG><a name="[79]"></a>FTR_DividerFast</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, attitude.o(i.FTR_DividerFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FTR_DividerFast &rArr; RotateCtrllerFastI &rArr; RotateMoveFPR90 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrllerFastI
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateMachine
</UL>

<P><STRONG><a name="[9f]"></a>GridActSave</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, occupyinggrid.o(i.GridActSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GridActSave &rArr; getActDirState
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getActDirState
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
</UL>

<P><STRONG><a name="[a1]"></a>GridSetup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, occupyinggrid.o(i.GridSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GridSetup &rArr; MapActivityRecord &rArr; sendMes
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getActDirState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapActivityRecord
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeyEvent
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigaSetup
</UL>

<P><STRONG><a name="[a5]"></a>InfraredLoop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, infraredcalc.o(i.InfraredLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InfraredLoop &rArr; getRedVal &rArr; Adc_Transition
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRedVal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveInterrupt
</UL>

<P><STRONG><a name="[10a]"></a>Infrared_Send_Control</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, infrared_1.o(i.Infrared_Send_Control))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRedVal
</UL>

<P><STRONG><a name="[85]"></a>Infrared_Send_Init</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, infrared_1.o(i.Infrared_Send_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[a7]"></a>LEDFlash</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mousefunclib.o(i.LEDFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseAppInterrupt
</UL>

<P><STRONG><a name="[86]"></a>LedAnKey_Init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, led.o(i.LedAnKey_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[f8]"></a>MY_NVIC_Init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usart.o(i.MY_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>

<P><STRONG><a name="[a9]"></a>MainInterrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, process.o(i.MainInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MainInterrupt &rArr; MoveInterrupt &rArr; AttitudeStateMachine &rArr; FSL_DividerFast &rArr; FSL_moveController &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseAppInterrupt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigaInterrupt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ad]"></a>MainLoop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, process.o(i.MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = MainLoop &rArr; mouseApp_Loop &rArr; MapCreatLoop &rArr; MapCreator &rArr; backToLastAct &rArr; getDirFirst &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Loop
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comHandleLoop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigaLoop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>MainSetup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, process.o(i.MainSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MainSetup &rArr; mouseApp_Setup &rArr; clearkeyEvent &rArr; delPathofFlash &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Setup
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comHandleInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigaSetup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>MapActivityRecord</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, occupyinggrid.o(i.MapActivityRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MapActivityRecord &rArr; sendMes
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMes
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMousePos
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridSetup
</UL>

<P><STRONG><a name="[b9]"></a>MapCreatLoop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ergodicmap.o(i.MapCreatLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MapCreatLoop &rArr; MapCreator &rArr; backToLastAct &rArr; getDirFirst &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backtoStart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathToFlash
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routeSearcher
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMove
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Loop
</UL>

<P><STRONG><a name="[ba]"></a>MapCreator</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, ergodicmap.o(i.MapCreator))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MapCreator &rArr; backToLastAct &rArr; getDirFirst &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visitedCheck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savePathPoint
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overFlag
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveToNext
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPos
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirnum
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delFromDir
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delDeathGrid
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backToLastAct
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapGrid
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMousePos
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreatLoop
</UL>

<P><STRONG><a name="[ce]"></a>MapCreatorInit</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ergodicmap.o(i.MapCreatorInit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigaSetup
</UL>

<P><STRONG><a name="[a3]"></a>MapInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, occupyinggrid.o(i.MapInit))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridSetup
</UL>

<P><STRONG><a name="[c9]"></a>MotorSpeedPidCtrl</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, pidctrller.o(i.MotorSpeedPidCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorSpeedPidCtrl &rArr; setMotorPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEncoderVal
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GetTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMotorPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Divider
</UL>

<P><STRONG><a name="[115]"></a>MouseDirUpdate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, odometer.o(i.MouseDirUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
</UL>

<P><STRONG><a name="[aa]"></a>MoveInterrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, movemain.o(i.MoveInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MoveInterrupt &rArr; AttitudeStateMachine &rArr; FSL_DividerFast &rArr; FSL_moveController &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Divider
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfraredLoop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInterrupt
</UL>

<P><STRONG><a name="[b0]"></a>MoveLoop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, movemain.o(i.MoveLoop))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[b5]"></a>MoveSetup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, movemain.o(i.MoveSetup))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetup
</UL>

<P><STRONG><a name="[ab]"></a>NavigaInterrupt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, navigationmain.o(i.NavigaInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NavigaInterrupt &rArr; odometerLoop &rArr; ETR_Divider &rArr; StandardGridCumulative &rArr; MapActivityRecord &rArr; sendMes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odometerLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInterrupt
</UL>

<P><STRONG><a name="[b1]"></a>NavigaLoop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, navigationmain.o(i.NavigaLoop))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[b6]"></a>NavigaSetup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, navigationmain.o(i.NavigaSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NavigaSetup &rArr; GridSetup &rArr; MapActivityRecord &rArr; sendMes
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreatorInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetup
</UL>

<P><STRONG><a name="[cf]"></a>NavigatorFastII</STRONG> (Thumb, 964 bytes, Stack size 176 bytes, navigator.o(i.NavigatorFastII))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = NavigatorFastII &rArr; moveNavigator
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTargetPos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRoute
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readOdometerEtr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMousePos
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBarrierAct
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLineFastI
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;navPosToDir
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveNavigator
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisGrid
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendkeyEvent
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Loop
</UL>

<P><STRONG><a name="[da]"></a>NavigatorStaticPath</STRONG> (Thumb, 220 bytes, Stack size 136 bytes, navigator.o(i.NavigatorStaticPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NavigatorStaticPath &rArr; moveNavigator
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRoute
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMousePos
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;navPosToDir
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveNavigator
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;staticPathEvent
</UL>

<P><STRONG><a name="[cc]"></a>PID_Divider</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pidctrller.o(i.PID_Divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PID_Divider &rArr; MotorSpeedPidCtrl &rArr; setMotorPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataEncoderVal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveInterrupt
</UL>

<P><STRONG><a name="[dc]"></a>PathWrite</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, comhandle.o(i.PathWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = PathWrite &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPathNode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPathCurNum
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStaticPathToFlash
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxBufAnalysis
</UL>

<P><STRONG><a name="[7e]"></a>Pwm_Init</STRONG> (Thumb, 428 bytes, Stack size 0 bytes, dain_ji.o(i.Pwm_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dian_Ji_Init
</UL>

<P><STRONG><a name="[77]"></a>RDD_Divider</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, attitude.o(i.RDD_Divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RDD_Divider &rArr; RotateCtrller &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrller
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateMachine
</UL>

<P><STRONG><a name="[78]"></a>RDD_DividerFast</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, attitude.o(i.RDD_DividerFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RDD_DividerFast &rArr; RotateCtrllerFast &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrllerFast
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateMachine
</UL>

<P><STRONG><a name="[e1]"></a>RotateCtrller</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, attitude.o(i.RotateCtrller))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RotateCtrller &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEncoderVal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateSet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetSpeed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDD_Divider
</UL>

<P><STRONG><a name="[e2]"></a>RotateCtrllerFast</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, attitude.o(i.RotateCtrllerFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RotateCtrllerFast &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEncoderVal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetSpeed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDD_DividerFast
</UL>

<P><STRONG><a name="[9e]"></a>RotateCtrllerFastI</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, attitude.o(i.RotateCtrllerFastI))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RotateCtrllerFastI &rArr; RotateMoveFPR90 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTR_DividerFast
</UL>

<P><STRONG><a name="[114]"></a>RotateFastOver</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, attitude.o(i.RotateFastOver))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
</UL>

<P><STRONG><a name="[e5]"></a>RotateMoveFPL90</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, attitude.o(i.RotateMoveFPL90))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RotateMoveFPL90 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEncoderVal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateSet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetSpeed
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrllerFastI
</UL>

<P><STRONG><a name="[e4]"></a>RotateMoveFPR90</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, attitude.o(i.RotateMoveFPR90))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RotateMoveFPR90 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEncoderVal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateSet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetSpeed
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrllerFastI
</UL>

<P><STRONG><a name="[113]"></a>RotationAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, attitude.o(i.RotationAngle))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
</UL>

<P><STRONG><a name="[75]"></a>SPC_Divider</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, attitude.o(i.SPC_Divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPC_Divider &rArr; SearcherPidCtrller &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateMachine
</UL>

<P><STRONG><a name="[e9]"></a>STMFLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stmflash.o(i.STMFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashToBuf
</UL>

<P><STRONG><a name="[ea]"></a>STMFLASH_ReadHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmflash.o(i.STMFLASH_ReadHalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>

<P><STRONG><a name="[eb]"></a>STMFLASH_Write</STRONG> (Thumb, 222 bytes, Stack size 36 bytes, stmflash.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStaticPathToFlash
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathToFlash
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delPathofFlash
</UL>

<P><STRONG><a name="[ed]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, stmflash.o(i.STMFLASH_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[e8]"></a>SearcherPidCtrller</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, attitude.o(i.SearcherPidCtrller))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SearcherPidCtrller &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRedOffset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTargetSpeed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_Divider
</UL>

<P><STRONG><a name="[111]"></a>SearcherSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, attitude.o(i.SearcherSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
</UL>

<P><STRONG><a name="[74]"></a>SetTargetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pidctrller.o(i.SetTargetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrllerFast
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateMachine
</UL>

<P><STRONG><a name="[89]"></a>StandardGridCumulative</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, odometer.o(i.StandardGridCumulative))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = StandardGridCumulative &rArr; MapActivityRecord &rArr; sendMes
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEncoderVal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAttitudeState
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapActivityRecord
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridActSave
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ysin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcos
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odometerFatalErrorReset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBarrierAct
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETR_Divider
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, time.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SysTick_Handler &rArr; MainInterrupt &rArr; MoveInterrupt &rArr; AttitudeStateMachine &rArr; FSL_DividerFast &rArr; FSL_moveController &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>Sys_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(i.Sys_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>Systick_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, time.o(i.Systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Systick_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[81]"></a>Timer4Init</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, time.o(i.Timer4Init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>USART3_RxBufAnalysis</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, comhandle.o(i.USART3_RxBufAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = USART3_RxBufAnalysis &rArr; PathWrite &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comHandleLoop
</UL>

<P><STRONG><a name="[100]"></a>USART_RxFuncConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i.USART_RxFuncConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comHandleInit
</UL>

<P><STRONG><a name="[4f]"></a>USART_RxToBuf</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, comhandle.o(i.USART_RxToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_RxToBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comhandle.o(i.comHandleInit)
</UL>
<P><STRONG><a name="[87]"></a>UsartInit</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, usart.o(i.UsartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UsartInit &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>

<P><STRONG><a name="[dd]"></a>UsartSendData</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usart.o(i.UsartSendData))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMes
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathWrite
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMCCode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Setup
</UL>

<P><STRONG><a name="[66]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c7]"></a>backToLastAct</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, ergodicmap.o(i.backToLastAct))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = backToLastAct &rArr; getDirFirst &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savePathPoint
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nPosToDir
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveToNext
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPos
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackActCheck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMousePos
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
</UL>

<P><STRONG><a name="[be]"></a>backtoStart</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, ergodicmap.o(i.backtoStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = backtoStart &rArr; moveToNext &rArr; mouseMove &rArr; mouseMoveFastI
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathRingDel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nPosToDir
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveToNext
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMousePos
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMove
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreatLoop
</UL>

<P><STRONG><a name="[fb]"></a>clearkeyEvent</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mouseapp.o(i.clearkeyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = clearkeyEvent &rArr; delPathofFlash &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMCCode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStaticPathFlag
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPathOverFlag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delPathofFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Setup
</UL>

<P><STRONG><a name="[b3]"></a>comHandleInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, comhandle.o(i.comHandleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = comHandleInit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxFuncConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetup
</UL>

<P><STRONG><a name="[ae]"></a>comHandleLoop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, comhandle.o(i.comHandleLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = comHandleLoop &rArr; USART3_RxBufAnalysis &rArr; PathWrite &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxBufAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[bf]"></a>delDeathGrid</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, ergodicmap.o(i.delDeathGrid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delDeathGrid
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMapGrid
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapGrid
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
</UL>

<P><STRONG><a name="[c2]"></a>delFromDir</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ergodicmap.o(i.delFromDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delFromDir
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
</UL>

<P><STRONG><a name="[fe]"></a>delPathofFlash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mapsaver.o(i.delPathofFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = delPathofFlash &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeyEvent
</UL>

<P><STRONG><a name="[a2]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridSetup
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;staticPathEvent
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeyEvent
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendkeyEvent
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeyEvent
</UL>

<P><STRONG><a name="[71]"></a>delay_us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Transition
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRedVal
</UL>

<P><STRONG><a name="[109]"></a>dirToTh</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, myplanner.o(i.dirToTh))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlannerI
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosAfterMove
</UL>

<P><STRONG><a name="[a0]"></a>getActDirState</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, infraredcalc.o(i.getActDirState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getActDirState
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridActSave
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridSetup
</UL>

<P><STRONG><a name="[f1]"></a>getAttitudeState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, attitude.o(i.getAttitudeState))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
</UL>

<P><STRONG><a name="[d8]"></a>getBarrierAct</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, infraredcalc.o(i.getBarrierAct))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>

<P><STRONG><a name="[120]"></a>getCurPos</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, myplanner.o(i.getCurPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getCurPos
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlannerI
</UL>

<P><STRONG><a name="[c3]"></a>getDirFirst</STRONG> (Thumb, 358 bytes, Stack size 96 bytes, ergodicmap.o(i.getDirFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = getDirFirst &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMousePos
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backToLastAct
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
</UL>

<P><STRONG><a name="[c1]"></a>getDirnum</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ergodicmap.o(i.getDirnum))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savePathPoint
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
</UL>

<P><STRONG><a name="[d3]"></a>getDisGrid</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, navigator.o(i.getDisGrid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getDisGrid
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>

<P><STRONG><a name="[8f]"></a>getEncoderVal</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pidctrller.o(i.getEncoderVal))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrllerFast
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>

<P><STRONG><a name="[124]"></a>getInfraredEventVal</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, infraredcalc.o(i.getInfraredEventVal))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;staticPathEvent
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeyEvent
</UL>

<P><STRONG><a name="[104]"></a>getMapOver</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ergodicmap.o(i.getMapOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getMapOver
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapGrid
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overFlag
</UL>

<P><STRONG><a name="[112]"></a>getMotorState</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pidctrller.o(i.getMotorState))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
</UL>

<P><STRONG><a name="[b7]"></a>getMousePos</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, odometer.o(i.getMousePos))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOver
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backtoStart
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backToLastAct
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMes
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapActivityRecord
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorStaticPath
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>

<P><STRONG><a name="[c4]"></a>getNextPos</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ergodicmap.o(i.getNextPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getNextPos
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backToLastAct
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
</UL>

<P><STRONG><a name="[105]"></a>getOver</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, ergodicmap.o(i.getOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getOver &rArr; setTargetPos
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetPos
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMousePos
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overFlag
</UL>

<P><STRONG><a name="[127]"></a>getPathCurNum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myplanner.o(i.getPathCurNum))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStaticPathToFlash
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathToFlash
</UL>

<P><STRONG><a name="[fc]"></a>getPathOverFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mapsaver.o(i.getPathOverFlag))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeyEvent
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Setup
</UL>

<P><STRONG><a name="[108]"></a>getPosAfterMove</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, myplanner.o(i.getPosAfterMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = getPosAfterMove
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirToTh
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlannerI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathAnalysis
</UL>

<P><STRONG><a name="[98]"></a>getRedOffset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, infraredcalc.o(i.getRedOffset))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>

<P><STRONG><a name="[a6]"></a>getRedVal</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, infraredcalc.o(i.getRedVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getRedVal &rArr; Adc_Transition
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Send_Control
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Transition
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfraredLoop
</UL>

<P><STRONG><a name="[d0]"></a>getRoute</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, myplanner.o(i.getRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStaticPathToFlash
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathToFlash
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorStaticPath
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>

<P><STRONG><a name="[fd]"></a>getStaticPathFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mapsaver.o(i.getStaticPathFlag))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeyEvent
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Setup
</UL>

<P><STRONG><a name="[d9]"></a>getTargetPos</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, myplanner.o(i.getTargetPos))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStaticPathToFlash
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathToFlash
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathAnalysis
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = main &rArr; MainLoop &rArr; mouseApp_Loop &rArr; MapCreatLoop &rArr; MapCreator &rArr; backToLastAct &rArr; getDirFirst &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetup
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ac]"></a>mouseAppInterrupt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mouseapp.o(i.mouseAppInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mouseAppInterrupt &rArr; LEDFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInterrupt
</UL>

<P><STRONG><a name="[af]"></a>mouseApp_Loop</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mouseapp.o(i.mouseApp_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mouseApp_Loop &rArr; MapCreatLoop &rArr; MapCreator &rArr; backToLastAct &rArr; getDirFirst &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathToFlash
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOdometerFixOff
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routeSearcher
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreatLoop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;staticPathEvent
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeyEvent
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendkeyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[b4]"></a>mouseApp_Setup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mouseapp.o(i.mouseApp_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mouseApp_Setup &rArr; clearkeyEvent &rArr; delPathofFlash &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathSeqFromFlash
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOdometerFixOff
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashToBuf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStaticPathFlag
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPathOverFlag
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetup
</UL>

<P><STRONG><a name="[bb]"></a>mouseMove</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, movectrl.o(i.mouseMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mouseMove &rArr; mouseMoveFastI
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveToNext
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backtoStart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorStaticPath
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreatLoop
</UL>

<P><STRONG><a name="[4d]"></a>mouseMoveFastI</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, movectrl.o(i.mouseMoveFastI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mouseMoveFastI
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseDirUpdate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateSet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherSpeed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotationAngle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateFastOver
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorState
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorStaticPath
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>
<BR>[Address Reference Count : 2]<UL><LI> navigator.o(i.NavigatorFastII)
<LI> navigator.o(i.NavigatorStaticPath)
</UL>
<P><STRONG><a name="[4e]"></a>mouseMoveSP</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, movectrl.o(i.mouseMoveSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mouseMoveSP &rArr; mouseMoveFastI
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAttitudeState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOdometerEtr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odometerPosAdd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseDirUpdate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFastStMoveGridNum
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveFastI
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateSet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_FSLEtrnum
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherSpeed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotationAngle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navigator.o(i.NavigatorFastII)
</UL>
<P><STRONG><a name="[d2]"></a>moveNavigator</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, navigator.o(i.moveNavigator))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = moveNavigator
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorStaticPath
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>

<P><STRONG><a name="[c6]"></a>moveToNext</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ergodicmap.o(i.moveToNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = moveToNext &rArr; mouseMove &rArr; mouseMoveFastI
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMove
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backtoStart
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backToLastAct
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
</UL>

<P><STRONG><a name="[f9]"></a>nPosToDir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ergodicmap.o(i.nPosToDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nPosToDir
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backtoStart
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backToLastAct
</UL>

<P><STRONG><a name="[d1]"></a>navPosToDir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, navigator.o(i.navPosToDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = navPosToDir
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorStaticPath
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>

<P><STRONG><a name="[f4]"></a>odometerFatalErrorReset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, odometer.o(i.odometerFatalErrorReset))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
</UL>

<P><STRONG><a name="[cd]"></a>odometerLoop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, odometer.o(i.odometerLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = odometerLoop &rArr; ETR_Divider &rArr; StandardGridCumulative &rArr; MapActivityRecord &rArr; sendMes
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETR_Divider
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigaInterrupt
</UL>

<P><STRONG><a name="[116]"></a>odometerPosAdd</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, odometer.o(i.odometerPosAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = odometerPosAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ysin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcos
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
</UL>

<P><STRONG><a name="[c8]"></a>overFlag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ergodicmap.o(i.overFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = overFlag &rArr; getOver &rArr; setTargetPos
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOver
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMapOver
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
</UL>

<P><STRONG><a name="[11a]"></a>pathAnalysis</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, myplanner.o(i.pathAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pathAnalysis &rArr; getPosAfterMove
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPathNode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTargetPos
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapPosX
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapDis
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosAfterMove
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routeSearcher
</UL>

<P><STRONG><a name="[11d]"></a>pathPlannerI</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, myplanner.o(i.pathPlannerI))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pathPlannerI &rArr; getPosAfterMove
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMapDis
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveCurPos
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapPosX
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapDis
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosAfterMove
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurPos
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirToTh
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routeSearcher
</UL>

<P><STRONG><a name="[fa]"></a>pathRingDel</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ergodicmap.o(i.pathRingDel))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backtoStart
</UL>

<P><STRONG><a name="[121]"></a>plannerDataInit</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, myplanner.o(i.plannerDataInit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routeSearcher
</UL>

<P><STRONG><a name="[10f]"></a>readFlashToBuf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mapsaver.o(i.readFlashToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = readFlashToBuf &rArr; STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Setup
</UL>

<P><STRONG><a name="[11c]"></a>readMapDis</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, myplanner.o(i.readMapDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readMapDis
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlannerI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathAnalysis
</UL>

<P><STRONG><a name="[c0]"></a>readMapGrid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, occupyinggrid.o(i.readMapGrid))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visitedState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMapOver
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delDeathGrid
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapPosX
</UL>

<P><STRONG><a name="[11b]"></a>readMapPosX</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, myplanner.o(i.readMapPosX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readMapPosX
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapGrid
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlannerI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathAnalysis
</UL>

<P><STRONG><a name="[d5]"></a>readOdometerEtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, odometer.o(i.readOdometerEtr))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>

<P><STRONG><a name="[bc]"></a>routeSearcher</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, myplanner.o(i.routeSearcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = routeSearcher &rArr; writePathToFlash &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathToFlash
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plannerDataInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlannerI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreatLoop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Loop
</UL>

<P><STRONG><a name="[11f]"></a>saveCurPos</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, myplanner.o(i.saveCurPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = saveCurPos
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlannerI
</UL>

<P><STRONG><a name="[c5]"></a>savePathPoint</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, ergodicmap.o(i.savePathPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = savePathPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirnum
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backToLastAct
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
</UL>

<P><STRONG><a name="[b8]"></a>sendMes</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, occupyinggrid.o(i.sendMes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sendMes
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMousePos
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapActivityRecord
</UL>

<P><STRONG><a name="[ff]"></a>sendSMCCode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mousefunclib.o(i.sendSMCCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sendSMCCode
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeyEvent
</UL>

<P><STRONG><a name="[10d]"></a>sendkeyEvent</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mouseapp.o(i.sendkeyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sendkeyEvent &rArr; NavigatorFastII &rArr; moveNavigator
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Loop
</UL>

<P><STRONG><a name="[119]"></a>setFastStMoveGridNum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, attitude.o(i.setFastStMoveGridNum))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLineFastI
</UL>

<P><STRONG><a name="[d4]"></a>setLineFastI</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, navigator.o(i.setLineFastI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setLineFastI
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFastStMoveGridNum
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeStateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>

<P><STRONG><a name="[cb]"></a>setMotorPWM</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pidctrller.o(i.setMotorPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setMotorPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DianJi_TiaoSu
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>

<P><STRONG><a name="[118]"></a>setOdometerEtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, odometer.o(i.setOdometerEtr))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
</UL>

<P><STRONG><a name="[10c]"></a>setOdometerFixOff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, odometer.o(i.setOdometerFixOff))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Setup
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Loop
</UL>

<P><STRONG><a name="[df]"></a>setPathCurNum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myplanner.o(i.setPathCurNum))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathSeqFromFlash
</UL>

<P><STRONG><a name="[de]"></a>setPathNode</STRONG> (Thumb, 20 bytes, Stack size 20 bytes, myplanner.o(i.setPathNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = setPathNode
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathSeqFromFlash
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathAnalysis
</UL>

<P><STRONG><a name="[125]"></a>setSearchPlant</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ergodicmap.o(i.setSearchPlant))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startkeyEvent
</UL>

<P><STRONG><a name="[107]"></a>setTargetPos</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, myplanner.o(i.setTargetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setTargetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOver
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePathSeqFromFlash
</UL>

<P><STRONG><a name="[117]"></a>set_FSLEtrnum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, attitude.o(i.set_FSLEtrnum))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMoveSP
</UL>

<P><STRONG><a name="[103]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
</UL>

<P><STRONG><a name="[10b]"></a>startkeyEvent</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, mouseapp.o(i.startkeyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = startkeyEvent &rArr; GridSetup &rArr; MapActivityRecord &rArr; sendMes
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSearchPlant
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfraredEventVal
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Loop
</UL>

<P><STRONG><a name="[10e]"></a>staticPathEvent</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mouseapp.o(i.staticPathEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = staticPathEvent &rArr; NavigatorStaticPath &rArr; moveNavigator
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfraredEventVal
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorStaticPath
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Loop
</UL>

<P><STRONG><a name="[db]"></a>updataEncoderVal</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pidctrller.o(i.updataEncoderVal))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Divider
</UL>

<P><STRONG><a name="[7c]"></a>visitedCheck</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ergodicmap.o(i.visitedCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = visitedCheck &rArr; visitedState
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visitedState
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreator
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackActCheck
</UL>

<P><STRONG><a name="[126]"></a>visitedState</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ergodicmap.o(i.visitedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = visitedState
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMapGrid
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visitedCheck
</UL>

<P><STRONG><a name="[11e]"></a>writeMapDis</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, myplanner.o(i.writeMapDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = writeMapDis
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlannerI
</UL>

<P><STRONG><a name="[101]"></a>writeMapGrid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, occupyinggrid.o(i.writeMapGrid))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delDeathGrid
</UL>

<P><STRONG><a name="[110]"></a>writePathSeqFromFlash</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, mapsaver.o(i.writePathSeqFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = writePathSeqFromFlash &rArr; setPathNode
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetPos
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPathNode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPathCurNum
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Setup
</UL>

<P><STRONG><a name="[bd]"></a>writePathToFlash</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, mapsaver.o(i.writePathToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = writePathToFlash &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTargetPos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRoute
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPathCurNum
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routeSearcher
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapCreatLoop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseApp_Loop
</UL>

<P><STRONG><a name="[e0]"></a>writeStaticPathToFlash</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, mapsaver.o(i.writeStaticPathToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = writeStaticPathToFlash &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTargetPos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRoute
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPathCurNum
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathWrite
</UL>

<P><STRONG><a name="[f2]"></a>xcos</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, odometer.o(i.xcos))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odometerPosAdd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
</UL>

<P><STRONG><a name="[f3]"></a>ysin</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, odometer.o(i.ysin))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odometerPosAdd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>

<P><STRONG><a name="[128]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>

<P><STRONG><a name="[12b]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[131]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>

<P><STRONG><a name="[12e]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
</UL>

<P><STRONG><a name="[12f]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
</UL>

<P><STRONG><a name="[177]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>

<P><STRONG><a name="[178]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigatorFastII
</UL>

<P><STRONG><a name="[130]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[134]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>

<P><STRONG><a name="[132]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12a]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[12d]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>

<P><STRONG><a name="[133]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
</UL>

<P><STRONG><a name="[135]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[123]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[137]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>

<P><STRONG><a name="[138]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>

<P><STRONG><a name="[13a]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[13f]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>

<P><STRONG><a name="[13c]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrllerFast
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>

<P><STRONG><a name="[13d]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrllerFast
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>

<P><STRONG><a name="[17a]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDirFirst
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>

<P><STRONG><a name="[13e]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[142]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardGridCumulative
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrllerFast
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>

<P><STRONG><a name="[140]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[139]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[129]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
</UL>

<P><STRONG><a name="[141]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPR90
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMoveFPL90
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeedPidCtrl
</UL>

<P><STRONG><a name="[143]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearcherPidCtrller
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSL_moveController
</UL>

<P><STRONG><a name="[145]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ef]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f0]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[f5]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, time.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_init
</UL>

<P><STRONG><a name="[136]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[12c]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[144]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[13b]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[4c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
